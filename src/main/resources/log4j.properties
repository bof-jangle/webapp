# 常量
log4j.conversion.pattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ] %c{1}.%M(%L) | %m%n
# [级别(5位] 时间 method:日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数 [换行符] 日志信息 [换行符]
log4j.conversion.pattern.Console = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
# 时间 + <级别(5位)> [Thread线程:耗时ms] 类名（1级，无参则是全路径 2则是从类名开始往上再追溯1级）.方法名称(所在行)| 日志信息 换行符
log4j.conversion.pattern.FILE = %-d{yyyy-MM-dd HH:mm:ss} <%5p> [ %t:%r ] %c{1}.%M(%L) | %m%n
# %m 输出代码中指定的消息
# %p 输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c 输出所属的类全路径，{n} n代表输出路径层级数 ：类：xyz.jangle.demo.PrintDemo  ,{1}=PrintDemo {2}=demo.PrintDemo
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符
# %d 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式.
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。 %l = %c.%M(%M.java:%L)
# %M 方法名
# %L 日志输出所在行

### 设置 log4j.rootLogger = [ level ] , appenderName1, appenderName2, … ### 
#此处的Console 对应 log4j.appender.Console
#         D  对应 log4j.appender.D
# 根日志
log4j.rootLogger = debug, Console,D,E 

# 指定类(log4j.logger. + 类全路径 )的日志输出 = 级别 [附加器]
log4j.logger.xyz.jangle.demoname.service.impl.BsDemoServiceImpl = info,T
#log4j.rootLogger.level=debug
#rootLogger.level=debug
### 输出信息到控制台 ###  
log4j.appender.Console = org.apache.log4j.ConsoleAppender  
log4j.appender.Console.Target = System.out  
log4j.appender.Console.Threshold = DEBUG
log4j.appender.Console.layout = org.apache.log4j.PatternLayout  
log4j.appender.Console.layout.ConversionPattern = ${log4j.conversion.pattern.Console}
### 输出DEBUG 级别以上的日志到=D://logs/log.log  ###   DatePattern日期模式
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.D.File = D://logs/webapp/log.log
#log4j.appender.D.DatePattern = '.'yyyy-MM-dd--HH'.log'
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout  
log4j.appender.D.layout.ConversionPattern = ${log4j.conversion.pattern.FILE}
log4j.appender.D.encoding=UTF-8
### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.E.File =D://logs/webapp/error.log
#log4j.appender.E.File =/home/jangle/tomcatLogs/webapp/error.log
#log4j.appender.E.DatePattern = '.'yyyy-MM-dd-HH'.log'
log4j.appender.E.Append = true  
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout  
log4j.appender.E.layout.ConversionPattern =${log4j.conversion.pattern.FILE}
log4j.appender.E.encoding=UTF-8

### 输出特殊指定的INFO 级别以上的日志到=D://logs/webapp/t.log  此处用作特殊指定类的日志记录 ###
log4j.appender.T = org.apache.log4j.DailyRollingFileAppender
log4j.appender.T.File =D://logs/webapp/t.log
#log4j.appender.T.File =/home/jangle/tomcatLogs/webapp/error.log
#log4j.appender.T.DatePattern = '.'yyyy-MM-dd-HH'.log'
log4j.appender.T.Append = true
log4j.appender.T.Threshold = INFO
log4j.appender.T.layout = org.apache.log4j.PatternLayout
log4j.appender.T.layout.ConversionPattern =${log4j.conversion.pattern.FILE}
log4j.appender.T.encoding=UTF-8

#log4j.logger.com.ibatis=DEBUG

#与sql相关
log4j.logger.java.sql.Connection=debug
log4j.logger.java.sql.Statement=debug
log4j.logger.java.sql.PreparedStatement=debug

## jdbcTemplate
log4j.logger.org.springframework.jdbc=DEBUG
log4j.logger.org.springframework.jdbc.core=DEBUG
log4j.logger.org.springframework.jdbc.core.JdbcTemplate=debug

# mybatis部分
log4j.logger.com.ibatis=debug
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug

# transaction
log4j.logger.org.springframework.transaction=debug
log4j.logger.org.springframework.transaction.support=debug
log4j.logger.org.springframework.transaction.interceptor.TransactionInterceptor=debug



