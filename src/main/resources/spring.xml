<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan
		base-package="xyz.jangle.demoname.service">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- aop相关的配置 -->
	<!-- 配置注解扫面路径 -->
	<context:component-scan
		base-package="xyz.jangle.demoname.aop" />
	<!-- 开启注解 context:component-scan 已经涵盖了context:annotation-config的功能 -->
	<!-- <context:annotation-config /> -->
	<!-- 开启aspectj代理 -->
	<aop:aspectj-autoproxy ></aop:aspectj-autoproxy>


	<!-- 配置文件的引入，用于在properties文件中读取配置参数 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		       <list>
		              <value>classpath:data-source-config.properties</value>
		              <value>classpath:email-jangle.properties</value>
		       </list>
		</property>
	</bean>

	<!-- 配置数据源, 整合其他框架, 事务等. -->
	<!-- 1. 数据源 : DriverManagerDataSource 没有连接池功能，每次使用将打开一个新的物理JDBC连接。-->
<!-- 	<bean id="dataSource" -->
<!-- 		class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" -->
<!-- 			value="com.mysql.jdbc.Driver" /> -->
<!-- 		<property name="url" -->
<!-- 			value="${dataSourceUrl}" /> -->
<!-- 		<property name="username" value="${dataSourceUser}" /> -->
<!-- 		<property name="password" value="${dataSourcePassword}" /> -->
<!-- 	</bean> -->
	    <!-- 1. 数据源 :连接池 ,tomcat的jdbc pool,线上环境需要使用连接池来提升响应速度 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
      <property name="driverClassName" value="${dataDriver}" />
      <property name="url" value="${dataSourceUrl}" />
      <property name="username" value="${dataSourceUser}" />
      <property name="password" value="${dataSourcePassword}" />
      <!-- 空闲时是否检测 -->
      <property name="testWhileIdle" value="true" />
      <!-- 连接借出时，是否检测 -->
      <property name="testOnBorrow" value="true" />
      <!-- 连接还回时，是否检测 -->
      <property name="testOnReturn" value="false" />
      <!-- 检测使用的SQL语句  -->
      <property name="validationQuery" value="SELECT 1" />
      <!-- 检测间隔时间  -->
      <property name="validationInterval" value="30000" />
      <!-- 初始连接数量 -->
      <property name="initialSize" value="5" />
      <!-- 最小空闲连接数量 -->
      <property name="minIdle" value="5" />
      <!-- 最大空闲连接数量（若该值高于maxActive，会被重置为与maxActive相同）（在高并发的情况下，使两值相等能提高响应性能） -->
      <property name="maxIdle" value="20" />
      <!-- 最大活动的连接数量（包含空闲连接数量） -->
      <property name="maxActive" value="20" />
      <!-- 等待超时以毫秒为单位，在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。  -->  
      <property name="maxWait" value="10000" />
      <!-- 设置自动回收超时连接 -->
      <property name="removeAbandoned" value="true" />
      <!-- 自动回收超时时间(以秒数为单位) -->
      <property name="removeAbandonedTimeout" value="60" />
      <!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->
      <property name="logAbandoned" value="true" />
      <!-- 空闲连接，最少存活时间的单位毫秒值 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />
      <!-- 回收连接的时间间隔 -->
      <property name="timeBetweenEvictionRunsMillis" value="300000" />
      <!-- 是否启用JMX.(Java Management Extensions .Java管理扩展 )-->
      <property name="jmxEnabled" value="true" />
    </bean>

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<!-- 此处定义mapper映射文件，以通配符的形式定义整个包底下的所有mapper文件。 -->
		<property name="mapperLocations"
			value="classpath:xyz/jangle/demoname/mapper/*.xml" />
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描） (主要是接口，映射文件如果不在同一个包中，则在mybatis-config.xml等配置文件中配置 
		也可以在sqlSessionFactory中定义mapperLocations做批量包含) 这个对象主要做初始化使用，所以此处并不进行id和name的定义。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="xyz.jangle.demoname.dao"></property>
		<!-- 此处sqlSessionFactory的警告提示说，当配置多数据源的时候才需要进行该配置，故去除。 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
	</bean>

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven
		transaction-manager="txManager" />

	<!-- spring-mvc 附件功能需要配置的bean。  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="50000000" /><!-- 单位b 最大附件50M -->
	</bean>
	
	<!-- 定时任务 -->
	<import resource="classpath:spring-task.xml"/>
</beans>  