<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
            http://www.springframework.org/schema/aop
        	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
            http://www.springframework.org/schema/tx
        	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan
		base-package="xyz.jangle.demoname.service">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- aop相关的配置 -->
	<!-- 配置注解扫面路径 -->
	<context:component-scan
		base-package="xyz.jangle.demoname.aop" />
	<!-- 开启注解 context:component-scan 已经涵盖了context:annotation-config的功能 -->
	<!-- <context:annotation-config /> -->
	<!-- 开启aspectj代理 -->
	<aop:aspectj-autoproxy />



	<!-- 配置数据源, 整合其他框架, 事务等. -->
	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=UTF8" />
		<property name="username" value="jangle" />
		<property name="password" value="1" />
	</bean>

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<!-- 此处定义mapper映射文件，以通配符的形式定义整个包底下的所有mapper文件。 -->
		<property name="mapperLocations"
			value="classpath:xyz/jangle/demoname/mapper/*.xml" />
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描） (主要是接口，映射文件如果不在同一个包中，则在mybatis-config.xml等配置文件中配置 
		也可以在sqlSessionFactory中定义mapperLocations做批量包含) 这个对象主要做初始化使用，所以此处并不进行id和name的定义。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="xyz.jangle.demoname.dao"></property>
		<!-- 此处sqlSessionFactory的警告提示说，当配置多数据源的时候才需要进行该配置，故去除。 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
	</bean>

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven
		transaction-manager="txManager" />

</beans>  